"""Very small context-free grammar helper."""

from collections import deque
from typing import Dict, Iterable, List, Set


class CFG:
    def __init__(
        self,
        nonterminals: Set[str],
        terminals: Set[str],
        productions: Dict[str, List[List[str]]],
        start_symbol: str,
    ):
        self.nonterminals = nonterminals
        self.terminals = terminals
        self.productions = productions
        self.start_symbol = start_symbol

    def generates(self, word: str, max_steps: int = 1000) -> bool:
        """Return True if ``word`` can be generated by this grammar."""

        queue = deque([[self.start_symbol]])
        visited = set()
        steps = 0
        while queue and steps < max_steps:
            current = queue.popleft()
            steps += 1
            if tuple(current) in visited:
                continue
            visited.add(tuple(current))
            term = "".join([c for c in current if c in self.terminals])
            if term == word and all(s not in self.nonterminals for s in current):
                return True
            if len(term) > len(word):
                continue
            for i, symbol in enumerate(current):
                if symbol in self.nonterminals:
                    for prod in self.productions.get(symbol, []):
                        new = current[:i] + prod + current[i + 1 :]
                        queue.append(new)
                    break
        return False
